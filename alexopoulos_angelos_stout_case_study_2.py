# -*- coding: utf-8 -*-
"""alexopoulos_angelos_stout_case_study_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgrFEE8QSYqXrA-qS7WglCGglMfJGtGf

# Case Study no.2
Alexopoulos Angelos

## 1. Import Libraries
---
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as msno
import plotly.express as px
import itertools
import operator

"""## 2.Import of Dataset
---

#### 2.1 Data Loading
"""

df = pd.read_csv('casestudy.csv', index_col = 0)

"""#### 2.2 Data Description"""

print("The size of the dataset is", df.shape )
df.describe()

"""#### 2.3 Check for null valuess"""

null = df.columns[df.isnull().any()].tolist()

print("The columns that have null values are",len(null), "and are", null)

df.info()

"""##3.Result for each year"""

groups=df.groupby('year').sum()
print(groups)

# for each group, sum the Net_Revenue column and print the total revenue

total_revenue = groups['net_revenue'].sum()
print(f'Total revenue for : {total_revenue}')

def print_results(year, customers_current, revenue_current, revenue_previous, new_customers, per_new_customers, 
                  new_customer_revenue, per_new_customer_revenue,
                  existing_customers, per_existing_customers, exist_curr_revenue,
                  exist_prev_revenue, growth_current, lost_customers, revenue_lost, 
                  customers_previous):
  
  print('The requested year is ' + str(year) + ' and I have the following results ')
  print(' Number of customers for requested  Year:                 ', customers_current)
  print(' Number. of customers for requested previous Year:        ', customers_previous)
  print(' Number. of new customers:                                ', new_customers)
  print(' Percentage of new customers:                             ', per_new_customers)
  print(' Number of existing customers from previous Year:        ', existing_customers)
  print(' Percentage of Existing Customers from previous Year:     ', per_existing_customers)
  print(' Number. of Lost Customers:                               ', lost_customers)
  print(' Total Revenue :                                          ', revenue_current)
  print(' Total Revenue for previous Year:                         ', revenue_previous)
  print(' New Customer Revenue in :                                ', new_customer_revenue)
  print(' Percentage of New Customer Revenue:                      ', per_new_customer_revenue)
  print(' Total Revenue of Existing Customers :                    ', exist_curr_revenue)
  print(' Total Revenue of Existing Customers for previous Year:   ', exist_prev_revenue)
  print(' Total Revenue Lost due to Attrition :                    ', revenue_lost)
  print(' Existing customer growth :                               ', growth_current)
  
  return

#2016
year=2016
prev_year=2015
df_curr_year = df[(df['year'] == year)]
df_previous_year = df[(df['year'] == prev_year)]

#Total Revenue for current year(2016)
net_revenue_total_current = df_curr_year['net_revenue'].sum()

#Total Revenue for previous year(2015)
net_revenue_total_prev = df_previous_year['net_revenue'].sum()

#aggregate unique customers for current year
unique_customers_current_list = df_curr_year['customer_email'].unique().tolist()
unique_customers_current = len(unique_customers_current_list)

#aggregate unique customers for previous year
unique_customers_previous_list = df_previous_year['customer_email'].unique().tolist()
unique_prev_customers = len(unique_customers_previous_list)


# Calculate New Customer Revenue 
#in order to check new customers i make a joint set for previous/current unique customers
#and I keep only the new customers(that are not in the previous customers list)
customers_current = set(unique_customers_current_list)  
customers_previous = set(unique_customers_previous_list)

# check customers in both
customers_existing = list(customers_current.intersection(customers_previous))

#search for index of customers in both
#we assign the new customers to a new list(customers that belong in current and not previous)
new_customers_list = ~df_curr_year['customer_email'].isin(customers_existing)
new_customers_current = df_curr_year[new_customers_list]

#new customers for current year
new_customers_list_current = new_customers_current['customer_email'].unique().tolist()
new_customers_size = len(new_customers_list_current)

new_cust_perc = (new_customers_size / unique_customers_current) * 100.0
total_revenue_new_customers_current = new_customers_current['net_revenue'].sum()
new_customer_revenue = total_revenue_new_customers_current / net_revenue_total_current
# customer growth for current year
growth_current = net_revenue_total_current - total_revenue_new_customers_current


#customer revenue for current year
existing_customers_current_revenue = df_curr_year['customer_email'].isin(customers_existing)
existing_customers_current_list = df_curr_year[existing_customers_current_revenue]

#customer number for current year
current_customers_list = existing_customers_current_list['customer_email'].unique().tolist()
current_customers_list_size = len(current_customers_list)

per_existing_customers = (current_customers_list_size / unique_customers_current) * 100.0

total_revenue_customers_existing = existing_customers_current_list['net_revenue'].sum()
  
existing_customers_prev_list = df_previous_year['customer_email'].isin(customers_existing)
existing_customers_prev_list_df = df_previous_year[existing_customers_prev_list]

total_revenue_existing_customers_previous = existing_customers_prev_list_df['net_revenue'].sum()

# Lost customer
# customer that but do not exist in the current year.
customer_difference = list(customers_previous.difference(customers_current))
customers_loss = len(customer_difference)


#Attrition Loss
lost_customers_list = df_previous_year['customer_email'].isin(customer_difference)
lost_customers_current = df_previous_year[lost_customers_list]
lost_customers_surrent_revenue = lost_customers_current['net_revenue'].sum()

print_results(year, unique_customers_current, net_revenue_total_current, net_revenue_total_prev,
                unique_prev_customers, new_cust_perc, total_revenue_new_customers_current, 
                new_customer_revenue, current_customers_list_size,
                per_existing_customers, total_revenue_customers_existing, 
                total_revenue_existing_customers_previous, growth_current, customers_loss,
               lost_customers_surrent_revenue, unique_prev_customers)

#2017
year=2017
prev_year=2016
df_curr_year = df[(df['year'] == year)]
df_previous_year = df[(df['year'] == prev_year)]

#Total Revenue for current year(2016)
net_revenue_total_current = df_curr_year['net_revenue'].sum()

#Total Revenue for previous year(2015)
net_revenue_total_prev = df_previous_year['net_revenue'].sum()

#aggregate unique customers for current year
unique_customers_current_list = df_curr_year['customer_email'].unique().tolist()
unique_customers_current = len(unique_customers_current_list)

#aggregate unique customers for previous year
unique_customers_previous_list = df_previous_year['customer_email'].unique().tolist()
unique_prev_customers = len(unique_customers_previous_list)


# Calculate New Customer Revenue 
#in order to check new customers i make a joint set for previous/current unique customers
#and I keep only the new customers(that are not in the previous customers list)
customers_current = set(unique_customers_current_list)  
customers_previous = set(unique_customers_previous_list)

# check customers in both
customers_existing = list(customers_current.intersection(customers_previous))

#search for index of customers in both
#we assign the new customers to a new list(customers that belong in current and not previous)
new_customers_list = ~df_curr_year['customer_email'].isin(customers_existing)
new_customers_current = df_curr_year[new_customers_list]

#new customers for current year
new_customers_list_current = new_customers_current['customer_email'].unique().tolist()
new_customers_size = len(new_customers_list_current)

new_cust_perc = (new_customers_size / unique_customers_current) * 100.0
total_revenue_new_customers_current = new_customers_current['net_revenue'].sum()
new_customer_revenue = total_revenue_new_customers_current / net_revenue_total_current
# customer growth for current year
growth_current = net_revenue_total_current - total_revenue_new_customers_current


#customer revenue for current year
existing_customers_current_revenue = df_curr_year['customer_email'].isin(customers_existing)
existing_customers_current_list = df_curr_year[existing_customers_current_revenue]

#customer number for current year
current_customers_list = existing_customers_current_list['customer_email'].unique().tolist()
current_customers_list_size = len(current_customers_list)

per_existing_customers = (current_customers_list_size / unique_customers_current) * 100.0

total_revenue_customers_existing = existing_customers_current_list['net_revenue'].sum()
  
existing_customers_prev_list = df_previous_year['customer_email'].isin(customers_existing)
existing_customers_prev_list_df = df_previous_year[existing_customers_prev_list]

total_revenue_existing_customers_previous = existing_customers_prev_list_df['net_revenue'].sum()

# Lost customer
# customer that but do not exist in the current year.
customer_difference = list(customers_previous.difference(customers_current))
customers_loss = len(customer_difference)


#Attrition Loss
lost_customers_list = df_previous_year['customer_email'].isin(customer_difference)
lost_customers_current = df_previous_year[lost_customers_list]
lost_customers_surrent_revenue = lost_customers_current['net_revenue'].sum()

print_results(year, unique_customers_current, net_revenue_total_current, net_revenue_total_prev,
                unique_prev_customers, new_cust_perc, total_revenue_new_customers_current, 
                new_customer_revenue, current_customers_list_size,
                per_existing_customers, total_revenue_customers_existing, 
                total_revenue_existing_customers_previous, growth_current, customers_loss,
               lost_customers_surrent_revenue, unique_prev_customers)

"""##4.Visualization """

#Total Revenue
data = {'2015':29036749.19, '2016':25730943.59, '2017':31417495.03}
Year = list(data.keys())
Values = list(data.values())
  
fig = plt.figure(figsize = (5, 5))
 

plt.barh(Year, Values, color ='blue',
        height = 0.2)
 
plt.xlabel("Year")
plt.ylabel("Total Revenue")
plt.title("Revenue Each Year")
plt.grid(False)
plt.show()

# Total Customers per Year
data = {'2015': 231294,'2016': 204646,'2017': 249987}
x = list(data.keys())
y = list(data.values()) 
fig = plt.figure(figsize = (6, 4))
plt.bar(x, y, width=0.3, color='darkred')
plt.xlabel("Year")
plt.ylabel("Total Customers")
plt.title("Total Customers")
plt.grid(False)
plt.show()

# new customers
data = { '2016':145062, '2017':229028}
Year = list(data.keys())
Values = list(data.values())
  
fig = plt.figure(figsize = (5, 5))
 
# creating the bar plot
plt.bar(Year, Values, color ='blue',
        width = 0.2)
 
plt.xlabel("New Customers per Year")
plt.ylabel("Customers")
plt.title("Year")
plt.grid(False)
plt.show()

"""***Conclusion:***

* As we observe from the total customer plot there is a loss of customers in 2015 which is followed by a loss in total revenue but in 2017 there is a recovery in both customers and revenue.

"""

